# YAML proyect for running ceedling tests

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :default_tasks:
    - options:dynamic gcov:all utils:gcov
  :options_paths:
    - options

#:test_build:
#  :use_assembly: TRUE

:release_build:
  :output: testest
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support

  :source:
    - ../src/**
    - ../inc/**
  :support:
    - test/support/**

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :html_report: true
  :html_report_type: detailed
  :xml_report: true
  :reports:
      - HtmlDetailed
      - text

  :utilities:
    - gcovr           # Use gcovr to create the specified reports (default).

  :gcovr:
    :xml_artifact_filename: coverage_report.xml
    :html_artifact_filename: coverage_report.html
    :json_artifact_filename: coverage_report.json
    :text_artifact_filename: coverage_report.txt

:flags:
  :test:
    :compile:
      :*:
        - -std=c99
        

# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :test: []
  :release: []

:plugins:
  # :load_paths:
  #   - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - raw_output_report
    - gcov
    - junit_tests_report

